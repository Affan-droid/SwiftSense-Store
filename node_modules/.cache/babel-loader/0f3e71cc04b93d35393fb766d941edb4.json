{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"F:\\\\pics\\\\Courses\\\\new courses\\\\react courses\\\\React Tutorial and Projects Course\\\\11. Tech Store\\\\22.1 21-Footer Component.zip\\\\react-tech-store-master\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"F:\\\\pics\\\\Courses\\\\new courses\\\\react courses\\\\React Tutorial and Projects Course\\\\11. Tech Store\\\\22.1 21-Footer Component.zip\\\\react-tech-store-master\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\pics\\\\Courses\\\\new courses\\\\react courses\\\\React Tutorial and Projects Course\\\\11. Tech Store\\\\22.1 21-Footer Component.zip\\\\react-tech-store-master\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Mover =\n/*#__PURE__*/\nfunction () {\n  function Mover(container, particle) {\n    _classCallCheck(this, Mover);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Mover, [{\n    key: \"move\",\n    value: function move(delta) {\n      var particle = this.particle;\n      particle.bubble.inRange = false;\n      particle.links = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.container.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (particle.destroyed) {\n            break;\n          }\n\n          if (plugin.particleUpdate) {\n            plugin.particleUpdate(particle, delta);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      this.moveParticle(delta);\n      this.moveParallax();\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(delta) {\n      var _a, _b;\n\n      var particle = this.particle;\n      var particlesOptions = particle.options;\n\n      if (!particlesOptions.move.enable) {\n        return;\n      }\n\n      var container = this.container;\n      var slowFactor = this.getProximitySpeedFactor();\n      var baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.NumberUtils.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) * container.retina.reduceFactor;\n      var maxSize = Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n      var sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n      var moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n      var moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.NumberUtils.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n      this.applyPath(delta);\n      var gravityOptions = particlesOptions.move.gravity;\n\n      if (gravityOptions.enable) {\n        particle.velocity.y += gravityOptions.acceleration * delta.factor / (60 * moveSpeed);\n      }\n\n      if (moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n\n      var decay = 1 - particle.options.move.decay;\n      particle.velocity.multTo(decay);\n      var velocity = particle.velocity.mult(moveSpeed);\n\n      if (gravityOptions.enable && velocity.y >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n        velocity.y = gravityOptions.maxSpeed;\n\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n\n      particle.position.addTo(velocity);\n\n      if (particlesOptions.move.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n\n      var initialPosition = particle.initialPosition;\n      var initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n\n      if (particle.maxDistance) {\n        if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n          particle.misplaced = initialDistance > particle.maxDistance;\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n          particle.misplaced = false;\n        } else if (particle.misplaced) {\n          if (particle.position.x < initialPosition.x && particle.velocity.x < 0 || particle.position.x > initialPosition.x && particle.velocity.x > 0) {\n            particle.velocity.x *= -Math.random();\n          }\n\n          if (particle.position.y < initialPosition.y && particle.velocity.y < 0 || particle.position.y > initialPosition.y && particle.velocity.y > 0) {\n            particle.velocity.y *= -Math.random();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"applyPath\",\n    value: function applyPath(delta) {\n      var particle = this.particle;\n      var particlesOptions = particle.options;\n      var pathOptions = particlesOptions.move.path;\n      var pathEnabled = pathOptions.enable;\n\n      if (!pathEnabled) {\n        return;\n      }\n\n      var container = this.container;\n\n      if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n      }\n\n      var generator = container.pathGenerator;\n\n      if (pathOptions.generator) {\n        var customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n        if (customGenerator) {\n          generator = customGenerator;\n        }\n      }\n\n      var path = generator.generate(particle);\n      particle.velocity.addTo(path);\n\n      if (pathOptions.clamp) {\n        particle.velocity.x = Utils_1.NumberUtils.clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = Utils_1.NumberUtils.clamp(particle.velocity.y, -1, 1);\n      }\n\n      particle.lastPathTime -= particle.pathDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax() {\n      var container = this.container;\n      var options = container.actualOptions;\n\n      if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      var particle = this.particle;\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var factor = particle.getRadius() / parallaxForce;\n      var tmp = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor() {\n      var container = this.container;\n      var options = container.actualOptions;\n      var active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n      if (!active) {\n        return 1;\n      }\n\n      var mousePos = this.container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return 1;\n      }\n\n      var particlePos = this.particle.getPosition();\n      var dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n\n      if (dist > radius) {\n        return 1;\n      }\n\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n\n  return Mover;\n}();\n\nexports.Mover = Mover;","map":null,"metadata":{},"sourceType":"script"}